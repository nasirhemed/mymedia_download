package helper

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
)

type VideoMetaData struct {
	Data struct {
		Getonemedia struct {
			Title string `json:"title"`
		} `json:"getOneMedia"`
	} `json:"data"`
}

func GetVideoMetaData(videoId string) VideoMetaData {

	bodyString := fmt.Sprintf(`{"variables":{"filename":"%s"},"query":"query ($filename: String!) {\n  getOneMedia(filename: $filename) {\n    title\n  }\n}\n"}`, videoId)
	body := strings.NewReader(bodyString)
	req, err := http.NewRequest("POST", "https://play.library.utoronto.ca/api/graphql", body)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Authority", "play.library.utoronto.ca")
	req.Header.Set("Sec-Ch-Ua", "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Dnt", "1")
	req.Header.Set("Sec-Ch-Ua-Mobile", "?0")
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36")
	req.Header.Set("Auth_session_id", "undefined")
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Origin", "https://play.library.utoronto.ca")
	req.Header.Set("Sec-Fetch-Site", "same-origin")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Referer", fmt.Sprintf("https://play.library.utoronto.ca/play/%s", videoId))
	req.Header.Set("Accept-Language", "en-US,en;q=0.9,ar-OM;q=0.8,ar;q=0.7")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal(err)
	}

	respBody, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()

	if err != nil {
		log.Fatal(err)
	}

	var videoMetaData VideoMetaData

	err = json.Unmarshal(respBody, &videoMetaData)

	if err != nil {
		log.Fatal(err)
	}

	return videoMetaData

}

func GetChunkId(videoId string) string {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl 'https://stream.library.utoronto.ca:1935/MyMedia/play/mp4:1/{videoId}.mp4/playlist.m3u8' \
	//   -H 'Connection: keep-alive' \
	//   -H 'sec-ch-ua: "Google Chrome";v="89", "Chromium";v="89", ";Not A Brand";v="99"' \
	//   -H 'DNT: 1' \
	//   -H 'sec-ch-ua-mobile: ?0' \
	//   -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36' \
	//   -H 'Accept: */*' \
	//   -H 'Origin: https://play.library.utoronto.ca' \
	//   -H 'Sec-Fetch-Site: same-site' \
	//   -H 'Sec-Fetch-Mode: cors' \
	//   -H 'Sec-Fetch-Dest: empty' \
	//   -H 'Referer: https://play.library.utoronto.ca/' \
	//   -H 'Accept-Language: en-US,en;q=0.9,ar-OM;q=0.8,ar;q=0.7' \
	//   --compressed

	reqUrl := fmt.Sprintf("https://stream.library.utoronto.ca:1935/MyMedia/play/mp4:1/%s.mp4/playlist.m3u8", videoId)
	req, err := http.NewRequest("GET", reqUrl, nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Sec-Ch-Ua", "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"")
	req.Header.Set("Dnt", "1")
	req.Header.Set("Sec-Ch-Ua-Mobile", "?0")
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Origin", "https://play.library.utoronto.ca")
	req.Header.Set("Sec-Fetch-Site", "same-site")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Referer", "https://play.library.utoronto.ca/")
	req.Header.Set("Accept-Language", "en-US,en;q=0.9,ar-OM;q=0.8,ar;q=0.7")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal(err)
	}

	defer resp.Body.Close()

	respBody, err := ioutil.ReadAll(resp.Body)

	respStr := string(respBody)

	lines := strings.Split(respStr, "\n")
	chunkList := lines[len(lines)-2]

	return chunkList
}

func GetChunkList(videoId string, chunk string) []string {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl 'https://stream.library.utoronto.ca:1935/MyMedia/play/mp4:1/{videoId}.mp4/chunklist_w1480152688.m3u8' \
	//   -H 'Connection: keep-alive' \
	//   -H 'sec-ch-ua: "Google Chrome";v="89", "Chromium";v="89", ";Not A Brand";v="99"' \
	//   -H 'DNT: 1' \
	//   -H 'sec-ch-ua-mobile: ?0' \
	//   -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36' \
	//   -H 'Accept: */*' \
	//   -H 'Origin: https://play.library.utoronto.ca' \
	//   -H 'Sec-Fetch-Site: same-site' \
	//   -H 'Sec-Fetch-Mode: cors' \
	//   -H 'Sec-Fetch-Dest: empty' \
	//   -H 'Referer: https://play.library.utoronto.ca/' \
	//   -H 'Accept-Language: en-US,en;q=0.9,ar-OM;q=0.8,ar;q=0.7' \
	//   --compressed

	reqUrl := fmt.Sprintf("https://stream.library.utoronto.ca:1935/MyMedia/play/mp4:1/%s.mp4/%s", videoId, chunk)

	req, err := http.NewRequest("GET", reqUrl, nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Sec-Ch-Ua", "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"")
	req.Header.Set("Dnt", "1")
	req.Header.Set("Sec-Ch-Ua-Mobile", "?0")
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Origin", "https://play.library.utoronto.ca")
	req.Header.Set("Sec-Fetch-Site", "same-site")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Referer", "https://play.library.utoronto.ca/")
	req.Header.Set("Accept-Language", "en-US,en;q=0.9,ar-OM;q=0.8,ar;q=0.7")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal(err)
	}

	defer resp.Body.Close()
	respBody, err := ioutil.ReadAll(resp.Body)

	if err != nil {
		log.Fatal(err)
	}

	respString := string(respBody)

	lines := strings.Split(respString, "\n")

	chunkList := make([]string, 0, len(lines))

	for _, line := range lines {
		if line != "" && line[0] != '#' {
			chunkList = append(chunkList, line)
		}
	}

	return chunkList

}

func GetChunk(videoId string, chunkFile string) []byte {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl 'https://stream.library.utoronto.ca:1935/MyMedia/play/mp4:1/{videoId}.mp4/media_w1480152688_80.ts' \
	//   -H 'Connection: keep-alive' \
	//   -H 'sec-ch-ua: "Google Chrome";v="89", "Chromium";v="89", ";Not A Brand";v="99"' \
	//   -H 'DNT: 1' \
	//   -H 'sec-ch-ua-mobile: ?0' \
	//   -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36' \
	//   -H 'Accept: */*' \
	//   -H 'Origin: https://play.library.utoronto.ca' \
	//   -H 'Sec-Fetch-Site: same-site' \
	//   -H 'Sec-Fetch-Mode: cors' \
	//   -H 'Sec-Fetch-Dest: empty' \
	//   -H 'Referer: https://play.library.utoronto.ca/' \
	//   -H 'Accept-Language: en-US,en;q=0.9,ar-OM;q=0.8,ar;q=0.7' \
	//   --compressed

	reqUrl := fmt.Sprintf("https://stream.library.utoronto.ca:1935/MyMedia/play/mp4:1/%s.mp4/%s", videoId, chunkFile)
	req, err := http.NewRequest("GET", reqUrl, nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Sec-Ch-Ua", "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"")
	req.Header.Set("Dnt", "1")
	req.Header.Set("Sec-Ch-Ua-Mobile", "?0")
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Origin", "https://play.library.utoronto.ca")
	req.Header.Set("Sec-Fetch-Site", "same-site")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Referer", "https://play.library.utoronto.ca/")
	req.Header.Set("Accept-Language", "en-US,en;q=0.9,ar-OM;q=0.8,ar;q=0.7")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	respBody, err := ioutil.ReadAll(resp.Body)

	if err != nil {
		log.Fatal(err)
	}

	return respBody
}
